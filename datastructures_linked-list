/**
 * Represents a node in a linked list.
 * @class
 */
class Node {
    /**
     * Creates a node with the given data.
     * @constructor
     * @param {number} data - The data to be stored in the node.
     */
    constructor(data) {
        this.data = data; // Data stored in the node
        this.next = null; // Pointer to the next node
    }
}

/**
 * Represents a linked list.
 * @class
 */
class LinkedList {
    /**
     * Creates an empty linked list.
     * @constructor
     */
    constructor() {
        this.head = null; // Pointer to the first node in the linked list
    }

    /**
     * Adds a new node with the given data at the beginning of the linked list.
     * @param {number} data - The data to be stored in the new node.
     */
    addFirst(data) {
        const newNode = new Node(data); // Create a new node
        newNode.next = this.head; // Point the new node to the current head
        this.head = newNode; // Update the head to the new node
    }

    // Other methods...

    /**
     * Prints the elements of the linked list.
     */
    print() {
        let current = this.head; // Start from the head of the linked list
        while (current) {
            console.log(current.data); // Print the data of the current node
            current = current.next; // Move to the next node
        }
    }
}

// Usage example:
const linkedList = new LinkedList(); // Create a new linked list
linkedList.addFirst(5); // Add nodes to the linked list
linkedList.addFirst(3);
linkedList.addFirst(8);
linkedList.addLast(6);
linkedList.removeTop();
linkedList.addAt(2, 8);
linkedList.removeLast();
linkedList.removeAt(2);
linkedList.print(); // Print the elements of the linked list
console.log("size = " + linkedList.size()); // Print the size of the linked list
